#!/bin/sh
#
# Puppet pre-commit hook
# This hook, does three things
#   1. Check if a file to be commited contains non-ascii characters
#   2. Runs `puppet parser validate` on all files to be commited
#   3. Runs `puppet-lint` on all files to be commited
#   4. Check for trailing whitespace in files
#


# 1. Check if a file to be commited contains non-ascii characters
echo -e "\e[0m1. Check if a file to be commited contains non-ascii characters"
# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)
# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z \
	 `git rev-parse --abbrev-ref HEAD` | LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
    # Redirect output to stderr.
    exec 1>&2
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.
This can cause problems if you want to work with people on other platforms.
To be portable it is advisable to rename the file.
If you know what you are doing you can disable this check using:
  git config hooks.allownonascii true
EOF
	exit 1
else
    echo "\e[32mFilename check: passed\e[0m"
fi


# 2. Runs `puppet parser validate` on all files to be commited
echo -e "\e[0m2. Runs 'puppet parser validate' on all files to be commited"
puppet_parser_validate=$(puppet parser validate `git diff --cached --name-only`; echo $?)
if [ "$puppet_parser_validate" != 0 ]; then
    exec 1>&2
    echo -e "\e[31mPuppet parset validate: failed\e[0m"
    puppet parser validate `git diff --cached --name-only`
    exit 1
else
    echo -e "\e[32mPuppet parset validate: passed\e[0m"
fi


# 3. Runs `puppet-lint` on all files to be commited
echo -e "\e[0m3. Runs 'puppet-lint' on all files to be commited"
puppet_lint_result=$(puppet-lint `git diff --cached --name-only` --error-level error; echo $?)
if [ "$puppet_lint_result" != 0 ]; then
    exec 1>&2
    echo -e "\e[31mPuppet-lint: failed\e[0m"
    puppet-lint `git diff --cached --name-only`
    exit 1
else
    echo -e "\e[32mPuppet-lint: passed\e[0m"
fi


# 4. Check for trailing whitespace in files
echo -e "\e[0m4. Check for trailing whitespace in files"
whitespace_check_result=$(git diff-index --check --cached `git rev-parse --abbrev-ref HEAD` --;echo $?)
if [ "$whitespace_check_result" != 0 ]; then
    exec 1>&2
    echo -e "\e[31mWhitespace check: failed\e[0m"
    git diff-index --check --cached `git rev-parse --abbrev-ref HEAD` --
    exit 1
else
    echo -e "\e[32mWhitespace check: passed\e[0m"
fi